@model InventorymanagementSystem.ViewModels.SaleViewModel
@{
    ViewData["Title"] = "Edit Sale";
}

<div class="container mt-4">
    <div class="card shadow-lg rounded-3">
        <div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center">
            <h4 class="mb-0">✏️ Edit Sale</h4>
            <a asp-action="Index" class="btn btn-dark btn-sm">← Back to List</a>
        </div>

        <form asp-action="Edit" method="post" class="card-body">
            <input type="hidden" asp-for="Id" />
            <div class="row mb-3">
                <div class="col-md-3">
                    <label asp-for="MemoNo" class="form-label fw-bold"></label>
                    <input asp-for="MemoNo" class="form-control" readonly />
                </div>
                <div class="col-md-3">
                    <label asp-for="SaleDate" class="form-label fw-bold"></label>
                    <input asp-for="SaleDate" class="form-control" type="date" />
                    <span asp-validation-for="SaleDate" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="ClientId" class="form-label fw-bold"></label>
                    <select asp-for="ClientId" asp-items="Model.ClientList" class="form-select">
                        <option value="">-- Select Buyer --</option>
                    </select>
                    <span asp-validation-for="ClientId" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="PaidAmount" class="form-label fw-bold">Amount Received</label>
                    <input asp-for="PaidAmount" class="form-control" type="number" step="0.01" min="0" id="PaidAmount" />
                    <span asp-validation-for="PaidAmount" class="text-danger"></span>
                </div>
            </div>

            <h5 class="mt-4 mb-2">🛒 Sale Items</h5>
            <table class="table table-bordered align-middle" id="saleItemsTable">
                <thead class="table-light">
                    <tr>
                        <th>Product</th>
                        <th class="text-end">Quantity</th>
                        <th class="text-end">Selling Price</th>
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody id="saleItemsBody">
                    @for (int i = 0; i < Model.SaleItems.Count; i++)
                    {
                        <tr>
                            <td>
                                <select asp-for="SaleItems[@i].ProductId" asp-items="Model.ProductList" class="form-select">
                                    <option value="">-- Select Product --</option>
                                </select>
                                <span asp-validation-for="SaleItems[@i].ProductId" class="text-danger"></span>
                            </td>
                            <td>
                                <input asp-for="SaleItems[@i].Quantity" class="form-control text-end quantity" />
                                <span asp-validation-for="SaleItems[@i].Quantity" class="text-danger"></span>
                            </td>
                            <td>
                                <input asp-for="SaleItems[@i].SellingPrice" class="form-control text-end selling-price" />
                                <span asp-validation-for="SaleItems[@i].SellingPrice" class="text-danger"></span>
                            </td>
                            <td class="text-center">
                                <button type="button" class="remove-row btn btn-danger btn-sm">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button type="button" id="addRow" class="btn btn-primary mb-3">+ Add Product</button>

            <div class="text-end">
                <label class="me-2 fw-bold">Due Amount:</label>
                <input type="number" step="0.01" class="form-control d-inline-block w-auto" id="dueAmount" readonly />
            </div>

            <div class="text-end mt-3">
                <button type="submit" class="btn btn-success px-4">💾 Save Changes</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        let rowIndex = @Model.SaleItems.Count;

        const productList = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ProductList));

        function createProductOptions() {
            let options = '<option value="">-- Select Product --</option>';
            for (const item of productList) {
                options += `<option value="${item.Value}">${item.Text}</option>`;
            }
            return options;
        }

        function updateRowIndices() {
            const rows = document.querySelectorAll("#saleItemsBody tr");
            rows.forEach((row, index) => {
                row.querySelectorAll("select, input").forEach(input => {
                    const name = input.getAttribute("name");
                    if (name) {
                        const newName = name.replace(/SaleItems\[\d+\]/, `SaleItems[${index}]`);
                        input.setAttribute("name", newName);
                    }
                });
            });
        }

        document.getElementById("addRow").addEventListener("click", function () {
            const tbody = document.getElementById("saleItemsBody");

            const newRow = document.createElement("tr");
            newRow.innerHTML = `
                <td>
                    <select name="SaleItems[${rowIndex}].ProductId" class="form-select">
                        ${createProductOptions()}
                    </select>
                </td>
                <td>
                    <input name="SaleItems[${rowIndex}].Quantity" class="form-control text-end quantity" />
                </td>
                <td>
                    <input name="SaleItems[${rowIndex}].SellingPrice" class="form-control text-end selling-price" />
                </td>
                <td class="text-center">
                    <button type="button" class="remove-row btn btn-danger btn-sm">Remove</button>
                </td>
            `;
            tbody.appendChild(newRow);
            rowIndex++;
            updateRowIndices();
            updateDueAmount();
        });

        document.getElementById("saleItemsBody").addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-row")) {
                e.target.closest("tr").remove();
                updateRowIndices();
                updateDueAmount();
            }
        });

        function updateDueAmount() {
            let total = 0;
            document.querySelectorAll("#saleItemsBody tr").forEach(row => {
                const qty = parseFloat(row.querySelector(".quantity").value) || 0;
                const price = parseFloat(row.querySelector(".selling-price").value) || 0;
                total += qty * price;
            });

            const paid = parseFloat(document.getElementById("PaidAmount").value) || 0;
            const due = total - paid;
            document.getElementById("dueAmount").value = due.toFixed(2);
        }

        document.getElementById("PaidAmount").addEventListener("input", updateDueAmount);
        document.getElementById("saleItemsBody").addEventListener("input", function (e) {
            if (e.target.classList.contains("quantity") || e.target.classList.contains("selling-price")) {
                updateDueAmount();
            }
        });

        updateDueAmount();
    </script>
}
