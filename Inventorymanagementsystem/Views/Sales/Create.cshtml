@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}
@model InventorymanagementSystem.ViewModels.SaleViewModel
@{
    ViewData["Title"] = "Create Sale";
}

<h2 class="text-2xl font-semibold mb-4">Create New Sale</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()

    <div asp-validation-summary="ModelOnly" class="text-red-500 mb-4"></div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <label asp-for="MemoNo" class="block font-medium">Memo No</label>
            <input asp-for="MemoNo" class="form-input w-full" readonly />
            <span asp-validation-for="MemoNo" class="text-red-500"></span>
        </div>

        <div>
            <label asp-for="SaleDate" class="block font-medium">Sale Date</label>
            <input asp-for="SaleDate" class="form-input w-full" type="date" />
            <span asp-validation-for="SaleDate" class="text-red-500"></span>
        </div>

        <div class="md:col-span-2">
            <label asp-for="ClientId" class="block font-medium">Buyer</label>
            <select asp-for="ClientId" asp-items="Model.ClientList" class="form-select w-full">
                <option value="">-- Select Buyer --</option>
            </select>
            <span asp-validation-for="ClientId" class="text-red-500"></span>
        </div>

        <div class="md:col-span-1">
            <label asp-for="PaidAmount" class="block font-medium">Amount Received</label>
            <input asp-for="PaidAmount" class="form-input w-full" type="number" step="0.01" min="0" />
            <span asp-validation-for="PaidAmount" class="text-red-500"></span>
        </div>

        <div class="md:col-span-1">
            <label class="block font-medium">Due Amount</label>
            <input id="dueAmount" class="form-input w-full" type="number" step="0.01" readonly />
        </div>
    </div>

    <hr class="my-6" />

    <h3 class="text-lg font-semibold mb-2">Sale Items</h3>

    <table class="min-w-full table-auto border mb-4" id="saleItemsTable">
        <thead>
            <tr class="bg-gray-200">
                <th class="px-4 py-2 text-black">Product</th>
                <th class="px-4 py-2 text-black">Quantity</th>
                <th class="px-4 py-2 text-black">Selling Price</th>
                <th class="px-4 py-2 text-center text-black">Action</th>
            </tr>
        </thead>
        <tbody id="saleItemsBody">
            @for (int i = 0; i < Model.SaleItems.Count; i++)
            {
                <tr>
                    <td class="px-2 py-2">
                        <select asp-for="SaleItems[@i].ProductId" asp-items="Model.ProductList" class="form-select w-full">
                            <option value="">-- Select Product --</option>
                        </select>
                        <span asp-validation-for="SaleItems[@i].ProductId" class="text-red-500"></span>
                    </td>
                    <td class="px-2 py-2">
                        <input asp-for="SaleItems[@i].Quantity" class="form-input w-full quantity" />
                        <span asp-validation-for="SaleItems[@i].Quantity" class="text-red-500"></span>
                    </td>
                    <td class="px-2 py-2">
                        <input asp-for="SaleItems[@i].SellingPrice" class="form-input w-full selling-price" />
                        <span asp-validation-for="SaleItems[@i].SellingPrice" class="text-red-500"></span>
                    </td>
                    <td class="px-2 py-2 text-center">
                        <button type="button" class="remove-row bg-red-500 text-white px-2 py-1 rounded">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" id="addRow" class="bg-blue-600 text-white px-4 py-2 rounded mb-4">+ Add Product</button>

    <div>
        <button type="submit" class="bg-green-600 text-white px-6 py-2 rounded">Submit</button>
        <a asp-action="Index" class="ml-2 text-gray-600 hover:underline">Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        let rowIndex = @Model.SaleItems.Count;

        const productList = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ProductList));

        function createProductOptions() {
            let options = '<option value="">-- Select Product --</option>';
            for (const item of productList) {
                options += `<option value="${item.Value}">${item.Text}</option>`;
            }
            return options;
        }

        function updateRowIndices() {
            const rows = document.querySelectorAll("#saleItemsBody tr");
            rows.forEach((row, index) => {
                row.querySelectorAll("select, input").forEach(input => {
                    const name = input.getAttribute("name");
                    if (name) {
                        const newName = name.replace(/SaleItems\[\d+\]/, `SaleItems[${index}]`);
                        input.setAttribute("name", newName);
                    }
                });
            });
        }

        document.getElementById("addRow").addEventListener("click", function () {
            const tbody = document.getElementById("saleItemsBody");

            const newRow = document.createElement("tr");
            newRow.innerHTML = `
                <td class="px-2 py-2">
                    <select name="SaleItems[${rowIndex}].ProductId" class="form-select w-full">
                        ${createProductOptions()}
                    </select>
                </td>
                <td class="px-2 py-2">
                    <input name="SaleItems[${rowIndex}].Quantity" class="form-input w-full quantity" />
                </td>
                <td class="px-2 py-2">
                    <input name="SaleItems[${rowIndex}].SellingPrice" class="form-input w-full selling-price" />
                </td>
                <td class="px-2 py-2 text-center">
                    <button type="button" class="remove-row bg-red-500 text-white px-2 py-1 rounded">Remove</button>
                </td>
            `;
            tbody.appendChild(newRow);
            rowIndex++;
            updateRowIndices();
            updateDueAmount();
        });

        document.getElementById("saleItemsBody").addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-row")) {
                e.target.closest("tr").remove();
                updateRowIndices();
                updateDueAmount();
            }
        });

        // Calculate total and due
        function updateDueAmount() {
            let total = 0;
            document.querySelectorAll("#saleItemsBody tr").forEach(row => {
                const qty = parseFloat(row.querySelector(".quantity").value) || 0;
                const price = parseFloat(row.querySelector(".selling-price").value) || 0;
                total += qty * price;
            });

            const paid = parseFloat(document.getElementById("PaidAmount").value) || 0;
            const due = total - paid;
            document.getElementById("dueAmount").value = due.toFixed(2);
        }

        document.getElementById("PaidAmount").addEventListener("input", updateDueAmount);
        document.getElementById("saleItemsBody").addEventListener("input", function (e) {
            if (e.target.classList.contains("quantity") || e.target.classList.contains("selling-price")) {
                updateDueAmount();
            }
        });

        // Initialize due amount on page load
        updateDueAmount();
    </script>
}
